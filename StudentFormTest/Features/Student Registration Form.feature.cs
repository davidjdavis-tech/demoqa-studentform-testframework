// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StudentFormTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Demoqa Practise Form")]
    public partial class DemoqaPractiseFormFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Student Registration Form.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Demoqa Practise Form", "\tThis is a suite of tests to test the functionality of the Student Registration F" +
                    "orm on the demoqa website. Url: https://demoqa.com/automation-practice-form", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 6
 testRunner.Given("I have navigated to \"https://demoqa.com/automation-practice-form\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("010 Valid Mandatory Data Should Yield Popup Displaying Sent Data")]
        [NUnit.Framework.CategoryAttribute("happyPath")]
        [NUnit.Framework.CategoryAttribute("positive")]
        public virtual void _010ValidMandatoryDataShouldYieldPopupDisplayingSentData()
        {
            string[] tagsOfScenario = new string[] {
                    "happyPath",
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("010 Valid Mandatory Data Should Yield Popup Displaying Sent Data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "First Name",
                            "b"});
                table1.AddRow(new string[] {
                            "Last Name",
                            "a"});
                table1.AddRow(new string[] {
                            "Email",
                            "blah@me.com"});
                table1.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table1.AddRow(new string[] {
                            "Mobile Number",
                            "1111111111"});
#line 10
 testRunner.When("I enter student details as follows", ((string)(null)), table1, "When ");
#line hidden
#line 17
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Then("the popup appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.And("the popup title is \"Thanks for submitting the form\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Values"});
                table2.AddRow(new string[] {
                            "Student Name",
                            "b a"});
                table2.AddRow(new string[] {
                            "Student Email",
                            "blah@me.com"});
                table2.AddRow(new string[] {
                            "Gender",
                            ""});
                table2.AddRow(new string[] {
                            "Mobile",
                            "1111111111"});
                table2.AddRow(new string[] {
                            "Subjects",
                            ""});
                table2.AddRow(new string[] {
                            "Hobbies",
                            ""});
                table2.AddRow(new string[] {
                            "Picture",
                            ""});
                table2.AddRow(new string[] {
                            "Address",
                            ""});
                table2.AddRow(new string[] {
                            "State and City",
                            ""});
#line 20
 testRunner.And("the popup screen table is as follows", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("020 Invalid Data Should Yield Validation Errors")]
        [NUnit.Framework.CategoryAttribute("happyPath")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void _020InvalidDataShouldYieldValidationErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "happyPath",
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("020 Invalid Data Should Yield Validation Errors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 34
 testRunner.When("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then("the popup does not appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "First Name",
                            "Red"});
                table3.AddRow(new string[] {
                            "Last Name",
                            "Red"});
                table3.AddRow(new string[] {
                            "Email",
                            "Green"});
                table3.AddRow(new string[] {
                            "Gender",
                            "Red"});
                table3.AddRow(new string[] {
                            "Mobile Number",
                            "Red"});
                table3.AddRow(new string[] {
                            "Date of Birth",
                            "Green"});
                table3.AddRow(new string[] {
                            "Hobbies",
                            "Green"});
                table3.AddRow(new string[] {
                            "Current Address",
                            "Green"});
#line 36
 testRunner.And("the field border colours are as follows", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("030 All Fields Valid Should Yield Popup Displaying Sent Data")]
        [NUnit.Framework.CategoryAttribute("positive")]
        public virtual void _030AllFieldsValidShouldYieldPopupDisplayingSentData()
        {
            string[] tagsOfScenario = new string[] {
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("030 All Fields Valid Should Yield Popup Displaying Sent Data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "First Name",
                            "blah"});
                table4.AddRow(new string[] {
                            "Last Name",
                            "blah"});
                table4.AddRow(new string[] {
                            "Email",
                            "blah@me.com"});
                table4.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table4.AddRow(new string[] {
                            "Mobile Number",
                            "1111111111"});
                table4.AddRow(new string[] {
                            "Date of Birth",
                            "27 Nov 1992"});
                table4.AddRow(new string[] {
                            "Subjects",
                            "English"});
                table4.AddRow(new string[] {
                            "Hobbies",
                            "Music"});
                table4.AddRow(new string[] {
                            "State",
                            "NCR"});
                table4.AddRow(new string[] {
                            "City",
                            "Delhi"});
#line 49
 testRunner.When("I enter student details as follows", ((string)(null)), table4, "When ");
#line hidden
#line 61
 testRunner.And("I upload a picture from file \"Data\\Pictures\\Picture1.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address"});
                table5.AddRow(new string[] {
                            "123 On a Road"});
                table5.AddRow(new string[] {
                            "Town"});
                table5.AddRow(new string[] {
                            "City"});
                table5.AddRow(new string[] {
                            "TE9 9WD"});
#line 62
 testRunner.And("I enter a current address as follows", ((string)(null)), table5, "And ");
#line hidden
#line 68
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.Then("the popup appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.And("the popup title is \"Thanks for submitting the form\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Values"});
                table6.AddRow(new string[] {
                            "Student Name",
                            "blah blah"});
                table6.AddRow(new string[] {
                            "Student Email",
                            "blah@me.com"});
                table6.AddRow(new string[] {
                            "Gender",
                            ""});
                table6.AddRow(new string[] {
                            "Mobile",
                            "1111111111"});
                table6.AddRow(new string[] {
                            "Date of Birth",
                            "27 November,1992"});
                table6.AddRow(new string[] {
                            "Subjects",
                            "English"});
                table6.AddRow(new string[] {
                            "Hobbies",
                            ""});
                table6.AddRow(new string[] {
                            "Picture",
                            "Picture1.jpg"});
                table6.AddRow(new string[] {
                            "Address",
                            "123 On a Road Town City TE9 9WD"});
                table6.AddRow(new string[] {
                            "State and City",
                            "NCR Delhi"});
#line 71
 testRunner.And("the popup screen table is as follows", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("040 All Fields Except Address Entered Should Yield Popup Displaying Sent Data")]
        [NUnit.Framework.CategoryAttribute("positive")]
        public virtual void _040AllFieldsExceptAddressEnteredShouldYieldPopupDisplayingSentData()
        {
            string[] tagsOfScenario = new string[] {
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("040 All Fields Except Address Entered Should Yield Popup Displaying Sent Data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "First Name",
                            "David"});
                table7.AddRow(new string[] {
                            "Last Name",
                            "Davis"});
                table7.AddRow(new string[] {
                            "Email",
                            "david@davidjdavis.co.uk"});
                table7.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table7.AddRow(new string[] {
                            "Mobile Number",
                            "2222222222"});
                table7.AddRow(new string[] {
                            "Date of Birth",
                            "13 May 1993"});
                table7.AddRow(new string[] {
                            "Subjects",
                            "Computer Science,Maths"});
                table7.AddRow(new string[] {
                            "Hobbies",
                            "Music"});
                table7.AddRow(new string[] {
                            "State",
                            "NCR"});
                table7.AddRow(new string[] {
                            "City",
                            "Delhi"});
#line 86
 testRunner.When("I enter student details as follows", ((string)(null)), table7, "When ");
#line hidden
#line 98
 testRunner.And("I upload a picture from file \"Data\\Pictures\\Picture1.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.Then("the popup appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.And("the popup title is \"Thanks for submitting the form\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Values"});
                table8.AddRow(new string[] {
                            "Student Name",
                            "David Davis"});
                table8.AddRow(new string[] {
                            "Student Email",
                            "david@davidjdavis.co.uk"});
                table8.AddRow(new string[] {
                            "Gender",
                            ""});
                table8.AddRow(new string[] {
                            "Mobile",
                            "2222222222"});
                table8.AddRow(new string[] {
                            "Date of Birth",
                            "13 May,1993"});
                table8.AddRow(new string[] {
                            "Subjects",
                            "Computer Science, Maths"});
                table8.AddRow(new string[] {
                            "Hobbies",
                            ""});
                table8.AddRow(new string[] {
                            "Picture",
                            "Picture1.jpg"});
                table8.AddRow(new string[] {
                            "Address",
                            ""});
                table8.AddRow(new string[] {
                            "State and City",
                            "NCR Delhi"});
#line 102
 testRunner.And("the popup screen table is as follows", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("050 Valid Mandatory Plus Invalid Email Yields Validation Error On Email")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void _050ValidMandatoryPlusInvalidEmailYieldsValidationErrorOnEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("050 Valid Mandatory Plus Invalid Email Yields Validation Error On Email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "First Name",
                            "David"});
                table9.AddRow(new string[] {
                            "Last Name",
                            "Davis"});
                table9.AddRow(new string[] {
                            "Email",
                            "2"});
                table9.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table9.AddRow(new string[] {
                            "Mobile Number",
                            "2222222222"});
#line 117
 testRunner.When("I enter student details as follows", ((string)(null)), table9, "When ");
#line hidden
#line 124
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.Then("the popup does not appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "First Name",
                            "Green"});
                table10.AddRow(new string[] {
                            "Last Name",
                            "Green"});
                table10.AddRow(new string[] {
                            "Email",
                            "Red"});
                table10.AddRow(new string[] {
                            "Gender",
                            "Green"});
                table10.AddRow(new string[] {
                            "Mobile Number",
                            "Green"});
#line 126
 testRunner.And("the field border colours are as follows", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("060 Valid Mandatory Plus Invalid Mobile Number Yields Validation Error On Mobile " +
            "Number")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void _060ValidMandatoryPlusInvalidMobileNumberYieldsValidationErrorOnMobileNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("060 Valid Mandatory Plus Invalid Mobile Number Yields Validation Error On Mobile " +
                    "Number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "First Name",
                            "David"});
                table11.AddRow(new string[] {
                            "Last Name",
                            "Davis"});
                table11.AddRow(new string[] {
                            "Email",
                            "me@me.me"});
                table11.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table11.AddRow(new string[] {
                            "Mobile Number",
                            "1"});
#line 136
 testRunner.When("I enter student details as follows", ((string)(null)), table11, "When ");
#line hidden
#line 143
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.Then("the popup does not appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "First Name",
                            "Green"});
                table12.AddRow(new string[] {
                            "Last Name",
                            "Green"});
                table12.AddRow(new string[] {
                            "Email",
                            "Green"});
                table12.AddRow(new string[] {
                            "Gender",
                            "Green"});
                table12.AddRow(new string[] {
                            "Mobile Number",
                            "Red"});
#line 145
 testRunner.And("the field border colours are as follows", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("070 Fill Student Form with Valid Data From Csv Yields No Errors")]
        [NUnit.Framework.CategoryAttribute("positive")]
        public virtual void _070FillStudentFormWithValidDataFromCsvYieldsNoErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("070 Fill Student Form with Valid Data From Csv Yields No Errors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 155
 testRunner.When("I load student test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.And("I fill in the screen with test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And("I press the submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.Then("the popup appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.And("the popup title is \"Thanks for submitting the form\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Values"});
                table13.AddRow(new string[] {
                            "Student Name",
                            "Hi My"});
                table13.AddRow(new string[] {
                            "Student Email",
                            "name@is.bob"});
                table13.AddRow(new string[] {
                            "Gender",
                            ""});
                table13.AddRow(new string[] {
                            "Mobile",
                            "3333333333"});
                table13.AddRow(new string[] {
                            "Date of Birth",
                            "12 January,1955"});
                table13.AddRow(new string[] {
                            "Subjects",
                            ""});
                table13.AddRow(new string[] {
                            "Hobbies",
                            ""});
                table13.AddRow(new string[] {
                            "Picture",
                            ""});
                table13.AddRow(new string[] {
                            "Address",
                            ""});
                table13.AddRow(new string[] {
                            "State and City",
                            ""});
#line 160
 testRunner.And("the popup screen table is as follows", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("080 Check that field values remain on screen after entering")]
        [NUnit.Framework.CategoryAttribute("positive")]
        public virtual void _080CheckThatFieldValuesRemainOnScreenAfterEntering()
        {
            string[] tagsOfScenario = new string[] {
                    "positive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("080 Check that field values remain on screen after entering", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "First Name",
                            "blah"});
                table14.AddRow(new string[] {
                            "Last Name",
                            "blah"});
                table14.AddRow(new string[] {
                            "Email",
                            "blah@me.com"});
                table14.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table14.AddRow(new string[] {
                            "Mobile Number",
                            "1111111111"});
                table14.AddRow(new string[] {
                            "Date of Birth",
                            "27 Nov 1992"});
                table14.AddRow(new string[] {
                            "Subjects",
                            "English"});
                table14.AddRow(new string[] {
                            "Hobbies",
                            "Music"});
                table14.AddRow(new string[] {
                            "State",
                            "NCR"});
                table14.AddRow(new string[] {
                            "City",
                            "Delhi"});
#line 175
 testRunner.When("I enter student details as follows", ((string)(null)), table14, "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address"});
                table15.AddRow(new string[] {
                            "123 On a Road"});
                table15.AddRow(new string[] {
                            "Town"});
                table15.AddRow(new string[] {
                            "City"});
                table15.AddRow(new string[] {
                            "TE9 9WD"});
#line 187
 testRunner.And("I enter a current address as follows", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "First Name",
                            "blah"});
                table16.AddRow(new string[] {
                            "Last Name",
                            "blah"});
                table16.AddRow(new string[] {
                            "Email",
                            "blah@me.com"});
                table16.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table16.AddRow(new string[] {
                            "Mobile Number",
                            "1111111111"});
                table16.AddRow(new string[] {
                            "Date of Birth",
                            "27 Nov 1992"});
                table16.AddRow(new string[] {
                            "Subjects",
                            "English"});
                table16.AddRow(new string[] {
                            "Hobbies",
                            "Music"});
                table16.AddRow(new string[] {
                            "State",
                            "NCR"});
                table16.AddRow(new string[] {
                            "City",
                            "Delhi"});
#line 193
 testRunner.Then("the student details on the form are as follows", ((string)(null)), table16, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address"});
                table17.AddRow(new string[] {
                            "123 On a Road"});
                table17.AddRow(new string[] {
                            "Town"});
                table17.AddRow(new string[] {
                            "City"});
                table17.AddRow(new string[] {
                            "TE9 9WD"});
#line 205
 testRunner.And("the current address field is as follows", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
